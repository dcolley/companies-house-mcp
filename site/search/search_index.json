{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Companies House MCP Server Documentation","text":"<p>Welcome to the Companies House MCP Server documentation. This server provides AI assistants with access to UK Companies House public data through the Model Context Protocol (MCP).</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Install the server: <code>npm install -g companies-house-mcp</code></li> <li>Get your API key: Companies House Developer Portal</li> <li>Configure Claude: Add the server to your MCP configuration</li> <li>Start searching: Ask Claude about UK companies!</li> </ol>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#core-documentation","title":"Core Documentation","text":"<ul> <li>API Reference - Complete tool specifications and examples</li> <li>Testing Guide - How to test the server and run the test suite</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Installation and setup instructions</li> <li>Tools Reference - Complete tool documentation and examples</li> </ul>"},{"location":"#available-tools","title":"Available Tools","text":"Tool Description <code>search_companies</code> Search for companies by name or number <code>get_company_profile</code> Get detailed company information <code>get_company_officers</code> List company directors and secretaries <code>get_filing_history</code> View recent company filings <code>get_company_charges</code> Check company charges and mortgages <code>get_persons_with_significant_control</code> Get PSC information <code>search_officers</code> Search for officers by name"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd0d Comprehensive Search - Find companies and officers across the UK</li> <li>\ud83d\udcca Detailed Profiles - Get complete company information including status, addresses, and key dates</li> <li>\ud83d\udc65 Officer Information - Access current and historical director/secretary data</li> <li>\ud83d\udcc4 Filing History - View recent accounts, returns, and other filings</li> <li>\ud83d\udcb0 Financial Data - Check charges, mortgages, and security interests</li> <li>\ud83c\udfe2 Control Structure - Understand ownership through PSC data</li> <li>\u26a1 High Performance - Built-in caching and rate limiting</li> <li>\ud83d\udee1\ufe0f Robust Error Handling - Graceful handling of API issues</li> </ul>"},{"location":"#response-modes","title":"Response Modes","text":"<p>All tools support two response modes:</p> <ul> <li>Compact (default): Essential information only</li> <li>Verbose: Complete details with additional context</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>API Documentation: Companies House API</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see the main repository for contributing guidelines.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. </p>"},{"location":"companies-house-api-reference/","title":"Companies House MCP Server API Reference","text":"<p>This document provides detailed information about all available MCP tools, their parameters, responses, and usage examples.</p>"},{"location":"companies-house-api-reference/#overview","title":"Overview","text":"<p>The Companies House MCP Server provides 7 tools for accessing UK Companies House public data:</p> <ol> <li>search_companies - Search for companies</li> <li>get_company_profile - Get detailed company information</li> <li>get_company_officers - Get company officers/directors</li> <li>get_filing_history - Get company filing history</li> <li>get_company_charges - Get company charges/securities</li> <li>get_persons_with_significant_control - Get PSC information</li> <li>search_officers - Search for officers by name</li> </ol>"},{"location":"companies-house-api-reference/#tool-specifications","title":"Tool Specifications","text":""},{"location":"companies-house-api-reference/#search_companies","title":"search_companies","text":"<p>Search for companies by name or keywords.</p>"},{"location":"companies-house-api-reference/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>query</code> string \u2705 Search query - company name or keywords <code>limit</code> number \u274c Maximum results to return (default: 20, max: 100) <code>activeOnly</code> boolean \u274c Only return active companies (default: true)"},{"location":"companies-house-api-reference/#response-format","title":"Response Format","text":"<pre><code>**COMPANY NAME LTD** (No. 12345678)\nStatus: active\nIncorporated: 15 March 2010\nAddress: 123 Business Street, London, EC1A 1AA\n\n**ANOTHER COMPANY PLC** (No. 87654321)\nStatus: dissolved\nIncorporated: 5 January 2005\nDissolved: 12 December 2020\nAddress: 456 Corporate Avenue, Manchester, M1 1AA\n</code></pre>"},{"location":"companies-house-api-reference/#example-usage","title":"Example Usage","text":"<pre><code>// Search for active companies containing \"acme\"\nawait searchCompanies({\n  query: \"acme\",\n  limit: 10,\n  activeOnly: true\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid or missing query parameter</li> <li>No Results: No companies found matching the search criteria</li> <li>API Error: Companies House API unavailable or rate limited</li> </ul>"},{"location":"companies-house-api-reference/#get_company_profile","title":"get_company_profile","text":"<p>Get detailed information about a specific company.</p>"},{"location":"companies-house-api-reference/#parameters_1","title":"Parameters","text":"Parameter Type Required Description <code>companyNumber</code> string \u2705 8-character company number (e.g., \"12345678\")"},{"location":"companies-house-api-reference/#response-format_1","title":"Response Format","text":"<pre><code>**EXAMPLE COMPANY LIMITED** (No. 12345678)\n**Status**: active\n**Incorporated**: 15 March 2010\n**Type**: ltd (private-limited-guarant-nsc-limited-exemption)\n**SIC Codes**: 62012 - Business and domestic software development\n\n**Registered Office**:\n123 Business Street\nLondon\nEC1A 1AA\nUnited Kingdom\n\n**Accounts**:\nLast accounts made up to: 31 March 2023\nNext accounts due: 31 December 2024\nAccount type: full\n\n**Annual Return/Confirmation Statement**:\nLast made up to: 15 March 2023\nNext due: 15 March 2024\n</code></pre>"},{"location":"companies-house-api-reference/#example-usage_1","title":"Example Usage","text":"<pre><code>// Get profile for company number 12345678\nawait getCompanyProfile({\n  companyNumber: \"12345678\"\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios_1","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid company number format</li> <li>Not Found: Company number doesn't exist</li> <li>API Error: Companies House API issues</li> </ul>"},{"location":"companies-house-api-reference/#get_company_officers","title":"get_company_officers","text":"<p>Get current and former officers (directors/secretaries) of a company.</p>"},{"location":"companies-house-api-reference/#parameters_2","title":"Parameters","text":"Parameter Type Required Description <code>companyNumber</code> string \u2705 8-character company number <code>activeOnly</code> boolean \u274c Only return active officers (default: true) <code>limit</code> number \u274c Maximum results to return (default: 35)"},{"location":"companies-house-api-reference/#response-format_2","title":"Response Format","text":"<pre><code>**Current Officers for EXAMPLE COMPANY LIMITED (No. 12345678)**\n\n**John Smith** - Director\nAppointed: 15 March 2010\nNationality: British\nOccupation: Company Director\n\n**Jane Doe** - Secretary  \nAppointed: 1 April 2015\nNationality: British\nOccupation: Company Secretary\n\n**Former Officers** (when activeOnly=false):\n\n**Robert Johnson** - Director (Resigned)\nAppointed: 1 January 2010\nResigned: 31 December 2020\n</code></pre>"},{"location":"companies-house-api-reference/#example-usage_2","title":"Example Usage","text":"<pre><code>// Get all active officers\nawait getCompanyOfficers({\n  companyNumber: \"12345678\",\n  activeOnly: true,\n  limit: 50\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios_2","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid company number</li> <li>No Officers: No officers found (rare but possible)</li> <li>API Error: Service unavailable</li> </ul>"},{"location":"companies-house-api-reference/#get_filing_history","title":"get_filing_history","text":"<p>Get the filing history for a company, showing recent documents and submissions.</p>"},{"location":"companies-house-api-reference/#parameters_3","title":"Parameters","text":"Parameter Type Required Description <code>companyNumber</code> string \u2705 8-character company number <code>category</code> string \u274c Filter by category (e.g., \"accounts\", \"annual-return\") <code>limit</code> number \u274c Maximum results to return (default: 25) <code>startIndex</code> number \u274c Pagination start index (default: 0)"},{"location":"companies-house-api-reference/#response-format_3","title":"Response Format","text":"<pre><code>**Filing History for EXAMPLE COMPANY LIMITED (No. 12345678)**\n\n**Accounts filed** - 15 July 2023\nDocument ID: MzM2NjExOTU5MmFkaXF6a2N4\nDescription: Annual accounts for period ending 31 March 2023\n\n**Confirmation statement filed** - 15 March 2023\nDocument ID: MzM2NjExOTU5MmFkaXF6a2N4\nDescription: Confirmation statement made on 15 March 2023\n\n**Officer appointment** - 1 January 2023\nDocument ID: MzM2NjExOTU5MmFkaXF6a2N4\nDescription: Appointment of John Smith as director on 1 January 2023\n\nShowing results 1-25 of 150 total filings.\nUse startIndex parameter for pagination.\n</code></pre>"},{"location":"companies-house-api-reference/#available-categories","title":"Available Categories","text":"<ul> <li><code>accounts</code> - Annual accounts</li> <li><code>annual-return</code> - Annual returns</li> <li><code>confirmation-statement</code> - Confirmation statements</li> <li><code>incorporation</code> - Incorporation documents</li> <li><code>officers</code> - Officer appointments/resignations</li> <li><code>mortgage</code> - Mortgage and charge documents</li> <li><code>miscellaneous</code> - Other filings</li> </ul>"},{"location":"companies-house-api-reference/#example-usage_3","title":"Example Usage","text":"<pre><code>// Get recent accounts filings\nawait getFilingHistory({\n  companyNumber: \"12345678\",\n  category: \"accounts\",\n  limit: 10\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios_3","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid parameters</li> <li>No Filings: No filing history available</li> <li>API Error: Service issues</li> </ul>"},{"location":"companies-house-api-reference/#get_company_charges","title":"get_company_charges","text":"<p>Get charges (mortgages, debentures, etc.) registered against a company.</p>"},{"location":"companies-house-api-reference/#parameters_4","title":"Parameters","text":"Parameter Type Required Description <code>companyNumber</code> string \u2705 8-character company number <code>limit</code> number \u274c Maximum results to return (default: 25)"},{"location":"companies-house-api-reference/#response-format_4","title":"Response Format","text":"<pre><code>**Charges for EXAMPLE COMPANY LIMITED (No. 12345678)**\n\n**Charge 1** - Created: 15 March 2020\nStatus: outstanding\nAmount: \u00a3500,000\nSecured details: All that freehold property known as...\nPersons entitled: HSBC Bank plc\n\n**Charge 2** - Created: 1 January 2019\nStatus: satisfied\nAmount: \u00a3250,000\nSatisfied: 15 March 2020\nSecured details: Fixed and floating charges over...\nPersons entitled: Barclays Bank PLC\n\nTotal charges: 2\nOutstanding charges: 1\n</code></pre>"},{"location":"companies-house-api-reference/#charge-statuses","title":"Charge Statuses","text":"<ul> <li><code>outstanding</code> - Active charge</li> <li><code>satisfied</code> - Paid off/discharged</li> <li><code>part-satisfied</code> - Partially satisfied</li> </ul>"},{"location":"companies-house-api-reference/#example-usage_4","title":"Example Usage","text":"<pre><code>// Get all charges for a company\nawait getCompanyCharges({\n  companyNumber: \"12345678\",\n  limit: 50\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios_4","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid company number</li> <li>No Charges: No charges registered (common for many companies)</li> <li>API Error: Service unavailable</li> </ul>"},{"location":"companies-house-api-reference/#get_persons_with_significant_control","title":"get_persons_with_significant_control","text":"<p>Get information about persons with significant control (PSCs) over the company.</p>"},{"location":"companies-house-api-reference/#parameters_5","title":"Parameters","text":"Parameter Type Required Description <code>companyNumber</code> string \u2705 8-character company number <code>limit</code> number \u274c Maximum results to return (default: 25)"},{"location":"companies-house-api-reference/#response-format_5","title":"Response Format","text":"<pre><code>**Persons with Significant Control for EXAMPLE COMPANY LIMITED (No. 12345678)**\n\n**John Smith**\nKind: individual-person-with-significant-control\nNature of control: ownership-of-shares-75-to-100-percent\nNotified: 6 April 2016\nAddress: 123 Residential Street, London, SW1A 1AA\n\n**PARENT COMPANY LIMITED**  \nKind: corporate-entity-person-with-significant-control\nNature of control: ownership-of-shares-50-to-75-percent\nCompany Number: 87654321\nNotified: 1 January 2020\n\n**John Doe (via HOLDING TRUST)**\nKind: legal-person-person-with-significant-control\nNature of control: right-to-appoint-and-remove-directors\nNotified: 15 March 2019\n</code></pre>"},{"location":"companies-house-api-reference/#control-types","title":"Control Types","text":"<ul> <li>Ownership of shares (25-50%, 50-75%, 75-100%)</li> <li>Voting rights</li> <li>Right to appoint/remove directors</li> <li>Significant influence or control</li> </ul>"},{"location":"companies-house-api-reference/#example-usage_5","title":"Example Usage","text":"<pre><code>// Get PSC information\nawait getPersonsWithSignificantControl({\n  companyNumber: \"12345678\"\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios_5","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid company number</li> <li>No PSCs: No PSC information available</li> <li>API Error: Service issues</li> </ul>"},{"location":"companies-house-api-reference/#search_officers","title":"search_officers","text":"<p>Search for officers by name to find their current and previous company appointments.</p>"},{"location":"companies-house-api-reference/#parameters_6","title":"Parameters","text":"Parameter Type Required Description <code>query</code> string \u2705 Officer name to search for <code>limit</code> number \u274c Maximum results to return (default: 20, max: 100) <code>activeOnly</code> boolean \u274c Only return current appointments (default: true)"},{"location":"companies-house-api-reference/#response-format_6","title":"Response Format","text":"<pre><code>**Officer Search Results for \"john smith\"**\n\n**John Smith** \nCurrent appointment: Director at EXAMPLE COMPANY LIMITED (12345678)\nAppointed: 15 March 2010\nAddress: *****, London\n\n**John Smith**\nCurrent appointment: Director at ANOTHER COMPANY PLC (87654321)  \nAppointed: 1 January 2015\nAddress: *****, Manchester\n\n**John Smith** (Former)\nFormer appointment: Secretary at OLD COMPANY LTD (11111111)\nAppointed: 1 June 2005\nResigned: 31 December 2014\n</code></pre>"},{"location":"companies-house-api-reference/#example-usage_6","title":"Example Usage","text":"<pre><code>// Search for officers named \"john smith\"\nawait searchOfficers({\n  query: \"john smith\",\n  limit: 25,\n  activeOnly: true\n});\n</code></pre>"},{"location":"companies-house-api-reference/#error-scenarios_6","title":"Error Scenarios","text":"<ul> <li>Validation Error: Invalid or empty query</li> <li>No Results: No officers found with that name</li> <li>API Error: Service unavailable</li> </ul>"},{"location":"companies-house-api-reference/#common-response-patterns","title":"Common Response Patterns","text":""},{"location":"companies-house-api-reference/#success-response","title":"Success Response","text":"<p>All tools return responses in this format:</p> <pre><code>{\n  content: [\n    {\n      type: \"text\",\n      text: \"Formatted response content...\"\n    }\n  ]\n}\n</code></pre>"},{"location":"companies-house-api-reference/#error-response","title":"Error Response","text":"<p>Error responses follow this pattern:</p> <pre><code>{\n  isError: true,\n  content: [\n    {\n      type: \"text\", \n      text: \"Error: Clear description of what went wrong\"\n    }\n  ]\n}\n</code></pre>"},{"location":"companies-house-api-reference/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 500 requests per 5 minutes</li> <li>Companies House limit: 600 requests per 5 minutes</li> <li>Automatic throttling: Built-in rate limiting prevents API abuse</li> <li>Caching: Responses cached to reduce API calls</li> </ul>"},{"location":"companies-house-api-reference/#data-freshness","title":"Data Freshness","text":"<p>Data freshness varies by endpoint:</p> <ul> <li>Company profiles: Updated daily</li> <li>Officers: Updated when filed (usually within 24 hours)</li> <li>Filing history: Updated in real-time</li> <li>Charges: Updated when filed</li> <li>PSCs: Updated when filed</li> </ul>"},{"location":"companies-house-api-reference/#privacy-and-data-protection","title":"Privacy and Data Protection","text":"<ul> <li>Personal addresses: Officer residential addresses are redacted for privacy</li> <li>Sensitive information: PSC data shows only business-relevant control information</li> <li>GDPR compliance: All data handling follows GDPR requirements</li> <li>No data storage: Server doesn't persistently store personal data</li> </ul>"},{"location":"companies-house-api-reference/#error-codes","title":"Error Codes","text":"Error Description Action <code>INVALID_COMPANY_NUMBER</code> Company number format invalid Check format (8 characters) <code>COMPANY_NOT_FOUND</code> Company doesn't exist Verify company number <code>RATE_LIMITED</code> Too many requests Wait and retry <code>API_UNAVAILABLE</code> Companies House API down Try again later <code>INVALID_PARAMETERS</code> Request parameters invalid Check parameter format"},{"location":"companies-house-api-reference/#examples-and-use-cases","title":"Examples and Use Cases","text":""},{"location":"companies-house-api-reference/#due-diligence-workflow","title":"Due Diligence Workflow","text":"<pre><code>// 1. Search for company\nawait searchCompanies({ query: \"Example Ltd\" });\n\n// 2. Get detailed profile  \nawait getCompanyProfile({ companyNumber: \"12345678\" });\n\n// 3. Check officers\nawait getCompanyOfficers({ companyNumber: \"12345678\" });\n\n// 4. Review recent filings\nawait getFilingHistory({ companyNumber: \"12345678\", limit: 10 });\n\n// 5. Check for charges\nawait getCompanyCharges({ companyNumber: \"12345678\" });\n\n// 6. Verify control structure\nawait getPersonsWithSignificantControl({ companyNumber: \"12345678\" });\n</code></pre>"},{"location":"companies-house-api-reference/#officer-background-check","title":"Officer Background Check","text":"<pre><code>// Search for officer across all companies\nawait searchOfficers({ \n  query: \"John Smith\", \n  activeOnly: false,\n  limit: 50 \n});\n</code></pre>"},{"location":"companies-house-api-reference/#compliance-monitoring","title":"Compliance Monitoring","text":"<pre><code>// Check recent filings for compliance\nawait getFilingHistory({ \n  companyNumber: \"12345678\",\n  category: \"accounts\",\n  limit: 5 \n});\n</code></pre> <p>For more examples, see the examples directory in the repository.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18 or higher</li> <li>Companies House API key (free from developer.company-information.service.gov.uk)</li> </ul>"},{"location":"installation/#install-via-npm","title":"Install via npm","text":"<pre><code>npm install -g companies-house-mcp\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from source","text":"<pre><code>git clone https://github.com/aicayzer/companies-house-mcp.git\ncd companies-house-mcp\nnpm install\nnpm run build\nnpm link\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":""},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file or set environment variables:</p> <pre><code>COMPANIES_HOUSE_API_KEY=your_api_key_here\nDEBUG=false\n</code></pre>"},{"location":"installation/#mcp-client-setup","title":"MCP Client Setup","text":"<p>Add to your MCP client configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"companies-house\": {\n      \"command\": \"companies-house-mcp\",\n      \"args\": [\"--api-key\", \"your_api_key_here\"]\n    }\n  }\n}\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>Test the installation:</p> <pre><code>companies-house-mcp --help\n</code></pre> <p>The server should start and register 7 tools for Companies House data access. </p>"},{"location":"testing-guide/","title":"Testing Guide - Companies House MCP Server","text":""},{"location":"testing-guide/#overview","title":"Overview","text":"<p>This guide outlines the testing strategy for the Companies House MCP Server. Tests are organized into three categories: unit, integration, and contract tests.</p>"},{"location":"testing-guide/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/           # Test individual functions and classes\n\u251c\u2500\u2500 integration/    # Test with real Companies House API\n\u251c\u2500\u2500 contract/       # Test MCP protocol compliance\n\u2514\u2500\u2500 fixtures/       # Shared test data\n    \u2514\u2500\u2500 companies.json\n</code></pre>"},{"location":"testing-guide/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run specific test suites\nnpm run test:unit        # Unit tests only\nnpm run test:integration # Integration tests only\nnpm run test:coverage    # Generate coverage report\n\n# Run tests in watch mode\nnpm run test:watch\n</code></pre>"},{"location":"testing-guide/#test-categories","title":"Test Categories","text":""},{"location":"testing-guide/#unit-tests","title":"Unit Tests","text":"<p>Test individual components in isolation with mocked external dependencies.</p> <p>What to test: - Pure functions (formatters, validators) - Business logic within tools - Error handling scenarios - Edge cases</p> <p>Example: <pre><code>// tests/unit/lib/cache.test.ts\ndescribe('Cache', () =&gt; {\n  it('should store and retrieve values', () =&gt; {\n    const cache = new Cache(100);\n    cache.set('key', 'value', 60);\n    expect(cache.get('key')).toBe('value');\n  });\n\n  it('should respect TTL', async () =&gt; {\n    const cache = new Cache(100);\n    cache.set('key', 'value', 1); // 1 second TTL\n    await new Promise(resolve =&gt; setTimeout(resolve, 1100));\n    expect(cache.get('key')).toBeNull();\n  });\n});\n</code></pre></p>"},{"location":"testing-guide/#integration-tests","title":"Integration Tests","text":"<p>Test actual API interactions using known company numbers.</p> <p>Known Test Companies: - <code>02050399</code> - ZENITH PRINT (UK) LIMITED (active, has PSCs and charges) - <code>00006400</code> - MARINE AND GENERAL MUTUAL LIFE ASSURANCE SOCIETY - <code>00445790</code> - TESCO PLC - <code>12345678</code> - Invalid (for error testing)</p> <p>Note: The <code>get_company_officers</code> endpoint may return API service errors for some companies. Tests should handle this gracefully.</p> <p>Example: <pre><code>// tests/integration/search-companies.test.ts\ndescribe('Search Companies Integration', () =&gt; {\n  const client = new CompaniesHouseClient(process.env.COMPANIES_HOUSE_API_KEY!);\n\n  it('should find Tesco when searching', async () =&gt; {\n    const results = await client.searchCompanies('tesco', 5);\n\n    expect(results).toContainEqual(\n      expect.objectContaining({\n        companyNumber: '00445790',\n        title: expect.stringContaining('TESCO'),\n        companyStatus: 'active'\n      })\n    );\n  });\n\n  it('should handle company not found', async () =&gt; {\n    await expect(client.getCompanyProfile('99999999'))\n      .rejects.toThrow('Resource not found');\n  });\n});\n</code></pre></p>"},{"location":"testing-guide/#contract-tests","title":"Contract Tests","text":"<p>Verify MCP protocol compliance and tool behavior.</p> <p>What to test: - Tool registration and discovery - Input schema validation - Response format compliance - Error response format</p> <p>Example: <pre><code>// tests/contract/mcp-compliance.test.ts\ndescribe('MCP Protocol Compliance', () =&gt; {\n  let server: CompaniesHouseMCPServer;\n\n  beforeEach(() =&gt; {\n    server = new CompaniesHouseMCPServer('test', '1.0.0', 'test-key');\n  });\n\n  it('should expose tools with proper schema', () =&gt; {\n    const tools = server.getTools();\n\n    tools.forEach(tool =&gt; {\n      expect(tool).toHaveProperty('name');\n      expect(tool).toHaveProperty('description');\n      expect(tool.inputSchema).toMatchObject({\n        type: 'object',\n        properties: expect.any(Object),\n        required: expect.any(Array)\n      });\n    });\n  });\n});\n</code></pre></p>"},{"location":"testing-guide/#test-patterns","title":"Test Patterns","text":""},{"location":"testing-guide/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<p>Only mock external services, never internal modules:</p> <pre><code>// \u2705 Good - Mock external API\njest.mock('node-fetch');\n\n// \u274c Bad - Don't mock internal modules\njest.mock('../../../src/lib/client');\n</code></pre>"},{"location":"testing-guide/#using-fixtures","title":"Using Fixtures","text":"<p>Store common test data in fixtures:</p> <pre><code>// tests/fixtures/companies.json\n{\n  \"searchResults\": [\n    {\n      \"companyNumber\": \"00445790\",\n      \"title\": \"TESCO PLC\",\n      \"companyStatus\": \"active\",\n      \"companyType\": \"plc\",\n      \"dateOfCreation\": \"1947-11-27\"\n    }\n  ],\n  \"companyProfile\": {\n    \"company_name\": \"TESCO PLC\",\n    \"company_number\": \"00445790\",\n    \"company_status\": \"active\",\n    \"type\": \"plc\",\n    \"date_of_creation\": \"1947-11-27\",\n    \"registered_office_address\": {\n      \"address_line_1\": \"Tesco House\",\n      \"postal_code\": \"EN14 5HW\",\n      \"locality\": \"Welwyn Garden City\",\n      \"country\": \"United Kingdom\"\n    }\n  }\n}\n</code></pre>"},{"location":"testing-guide/#testing-error-scenarios","title":"Testing Error Scenarios","text":"<p>Always test error paths:</p> <pre><code>describe('Error Handling', () =&gt; {\n  it('should handle 401 unauthorized', async () =&gt; {\n    const client = new CompaniesHouseClient('invalid-key');\n\n    await expect(client.searchCompanies('test'))\n      .rejects.toThrow('Invalid Companies House API key');\n  });\n\n  it('should format errors for MCP', async () =&gt; {\n    const tool = new SearchCompaniesTool('invalid-key');\n    const result = await tool.execute({ query: 'test' });\n\n    expect(result).toEqual({\n      isError: true,\n      content: [{\n        type: 'text',\n        text: expect.stringContaining('Error:')\n      }]\n    });\n  });\n});\n</code></pre>"},{"location":"testing-guide/#best-practices","title":"Best Practices","text":""},{"location":"testing-guide/#1-test-behavior-not-implementation","title":"1. Test Behavior, Not Implementation","text":"<p>Focus on what the code does, not how it does it:</p> <pre><code>// \u2705 Good - Tests behavior\nit('should return formatted company data', async () =&gt; {\n  const result = await tool.execute({ companyNumber: '00445790' });\n  expect(result.content[0].text).toContain('TESCO PLC');\n  expect(result.content[0].text).toContain('Status: active');\n});\n\n// \u274c Bad - Tests implementation details\nit('should call formatAddress method', () =&gt; {\n  // Don't test internal method calls\n});\n</code></pre>"},{"location":"testing-guide/#2-use-descriptive-test-names","title":"2. Use Descriptive Test Names","text":"<p>Test names should describe the scenario and expected outcome:</p> <pre><code>// \u2705 Good\nit('should return empty array when no companies match search query', async () =&gt; {\n\n// \u274c Bad\nit('search test', () =&gt; {\n</code></pre>"},{"location":"testing-guide/#3-keep-tests-independent","title":"3. Keep Tests Independent","text":"<p>Each test should be able to run in isolation:</p> <pre><code>describe('CompaniesHouseClient', () =&gt; {\n  let client: CompaniesHouseClient;\n\n  beforeEach(() =&gt; {\n    // Fresh instance for each test\n    client = new CompaniesHouseClient('test-key');\n  });\n\n  afterEach(() =&gt; {\n    // Cleanup if needed\n    jest.clearAllMocks();\n  });\n});\n</code></pre>"},{"location":"testing-guide/#4-test-edge-cases","title":"4. Test Edge Cases","text":"<p>Don't just test the happy path:</p> <pre><code>describe('Pagination', () =&gt; {\n  it('should handle empty results', async () =&gt; {\n    const results = await client.searchCompanies('xyzxyzxyz123');\n    expect(results).toEqual([]);\n  });\n\n  it('should respect limit parameter', async () =&gt; {\n    const results = await client.searchCompanies('limited', 5);\n    expect(results.length).toBeLessThanOrEqual(5);\n  });\n\n  it('should handle maximum limit', async () =&gt; {\n    const results = await client.searchCompanies('test', 100);\n    expect(results.length).toBeLessThanOrEqual(100);\n  });\n});\n</code></pre>"},{"location":"testing-guide/#environment-setup","title":"Environment Setup","text":"<p>For integration tests, set up your environment:</p> <pre><code># .env.test\nCOMPANIES_HOUSE_API_KEY=your_test_api_key\n\n# Or use environment variable\nexport COMPANIES_HOUSE_API_KEY=your_test_api_key\n</code></pre>"},{"location":"testing-guide/#continuous-integration","title":"Continuous Integration","text":"<p>Tests run automatically on: - Every pull request to <code>develop</code> - Every push to <code>develop</code> or <code>main</code></p> <p>Failed tests will block merging.</p>"},{"location":"tools/","title":"Tools Reference","text":""},{"location":"tools/#available-tools","title":"Available Tools","text":""},{"location":"tools/#get_company_profile","title":"get_company_profile","text":"<p>Get detailed information about a specific company.</p> <p>Parameters: - <code>companyNumber</code> (required): 8-character company number - <code>verbose</code> (optional): Return detailed information</p> <p>Example: <pre><code>Get company profile for 00445790\n</code></pre></p>"},{"location":"tools/#get_company_officers","title":"get_company_officers","text":"<p>Get directors and secretaries for a company.</p> <p>Parameters: - <code>companyNumber</code> (required): 8-character company number - <code>activeOnly</code> (optional): Only return active officers (default: true) - <code>verbose</code> (optional): Return detailed information</p> <p>Example: <pre><code>Get officers for company 00445790\n</code></pre></p>"},{"location":"tools/#get_filing_history","title":"get_filing_history","text":"<p>Get filing history for a company.</p> <p>Parameters: - <code>companyNumber</code> (required): 8-character company number - <code>category</code> (optional): Filter by filing category - <code>limit</code> (optional): Maximum number of results</p> <p>Example: <pre><code>Get filing history for company 00445790\n</code></pre></p>"},{"location":"tools/#get_company_charges","title":"get_company_charges","text":"<p>Get charges and mortgages for a company.</p> <p>Parameters: - <code>companyNumber</code> (required): 8-character company number - <code>limit</code> (optional): Maximum number of results</p> <p>Example: <pre><code>Get charges for company 00445790\n</code></pre></p>"},{"location":"tools/#get_persons_with_significant_control","title":"get_persons_with_significant_control","text":"<p>Get persons with significant control (PSCs) for a company.</p> <p>Parameters: - <code>companyNumber</code> (required): 8-character company number - <code>limit</code> (optional): Maximum number of results</p> <p>Example: <pre><code>Get PSCs for company 00445790\n</code></pre></p>"},{"location":"tools/#search_companies","title":"search_companies","text":"<p>Search for companies by name or number.</p> <p>Parameters: - <code>query</code> (required): Company name or number to search for - <code>activeOnly</code> (optional): Only return active companies (default: true) - <code>limit</code> (optional): Maximum number of results - <code>verbose</code> (optional): Return detailed information</p> <p>Example: <pre><code>Search for companies named \"Tesco\"\n</code></pre></p>"},{"location":"tools/#search_officers","title":"search_officers","text":"<p>Search for officers by name.</p> <p>Parameters: - <code>query</code> (required): Officer name to search for - <code>limit</code> (optional): Maximum number of results</p> <p>Example: <pre><code>Search for officers named \"John Smith\"\n</code></pre></p>"},{"location":"tools/#response-modes","title":"Response Modes","text":"<p>All tools support verbose mode for detailed responses:</p> <ul> <li>Compact mode (default): Essential information only</li> <li>Verbose mode: Full details including all available fields</li> </ul>"},{"location":"tools/#rate-limiting","title":"Rate Limiting","text":"<p>The server implements rate limiting to comply with Companies House API limits: - 500 requests per 5 minutes - Automatic retry with exponential backoff - Response caching to minimize API calls </p>"}]}